---
import data from "../../scrape-stuff/odin-data.json";
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="container">
    <header>
      <h1>Odin Search</h1>
      <p class="subtitle">
        Search across {data.length} lessons
      </p>
    </header>

    <div class="search-container">
      <form>
        <svg
          class="search-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input
          name="search"
          class="search-input"
          placeholder="Search for lessons..."
          aria-label="Search for lessons"
        />
        <button class="clear-button" aria-label="Clear search" type="button">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </form>
      <p class="results-count"></p>
      <div class="results"></div>
      <div class="results-state">
        <div class="empty-state-container initial-state">
          <svg
            class="empty-state-icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            <line x1="11" y1="8" x2="11" y2="14"></line>
            <line x1="8" y1="11" x2="14" y2="11"></line>
          </svg>
          <h2 class="empty-state-title">Ready to explore The Odin Project</h2>
          <p class="empty-state-message">
            Type any keyword to discover relevant lessons
          </p>
          <p class="empty-state-tip">
            Try searching for: <span class="suggestion">project</span>, <span
              class="suggestion">css</span
            >, or <span class="suggestion">javascript</span>
          </p>
        </div>
        <div
          class="empty-state-container no-results-state"
          style="display: none;"
        >
          <svg
            class="empty-state-icon"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="8" y1="12" x2="16" y2="12"></line>
          </svg>
          <h2 class="empty-state-title">No matching lessons found</h2>
          <p class="empty-state-message">
            Try adjusting your search term or using different keywords
          </p>
          <p class="empty-state-tip">
            Check for typos or try more general terms
          </p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import data from "../../scrape-stuff/odin-data.json";
  import Fuse from "fuse.js";
  import type { FuseResult, RangeTuple } from "fuse.js";

  const resultsContainer = document.querySelector(".results") as HTMLDivElement;
  const searchBar = document.querySelector(".search-input") as HTMLInputElement;
  const clearButton = document.querySelector(
    ".clear-button"
  ) as HTMLButtonElement;
  const resultsCount = document.querySelector(
    ".results-count"
  ) as HTMLSpanElement;

  const emptyStateTip = document.querySelector(
    ".empty-state-tip"
  ) as HTMLParagraphElement;
  const initialState = document.querySelector(".initial-state") as HTMLElement;
  const noResultsState = document.querySelector(
    ".no-results-state"
  ) as HTMLElement;

  const fuse = new Fuse(data, {
    keys: ["title"],
    threshold: 0.2,
    includeMatches: true,
  });

  function withHighlight(value: string, indices: RangeTuple[]) {
    return value
      .split("")
      .map((s, i) => {
        if (indices.some(([start, end]) => start === i && end === start)) {
          return `<span class="highlight">${s}</span>`;
        } else if (indices.some(([start, _end]) => start === i)) {
          return `<span class="highlight">${s}`;
        } else if (indices.some(([_start, end]) => end === i)) {
          return `${s}</span>`;
        }

        return s;
      })
      .join("");
  }

  function renderSearchResult(
    searchResults: FuseResult<{
      title: string;
      link: string;
    }>[]
  ) {
    if (searchResults.length > 0) {
      resultsCount.textContent = `Found ${searchResults.length} result${searchResults.length === 1 ? "" : "s"}`;
      updateVisibility("results");
      resultsContainer.innerHTML = `
	${searchResults
    .map(
      ({ item, matches }) => `
			<div class="link-card" tabindex="0">
				<p class="link-title">${withHighlight(item.title, matches?.[0].indices as RangeTuple[])}</p>
				<a href="${item.link}" class="link-url" target="_blank" rel="noopener noreferrer">
					${item.link}
					<svg class="external-link-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
						<polyline points="15 3 21 3 21 9"></polyline>
						<line x1="10" y1="14" x2="21" y2="3"></line>
					</svg>
				</a>
			</div>
		`
    )
    .join("")}`;
    } else {
      resultsContainer.innerHTML = "";
      resultsCount.textContent = "No results found";
      updateVisibility("no-results");
    }
  }

  function renderInitialSearchResult() {
    resultsContainer.innerHTML = "";
    resultsCount.textContent = "";
    updateVisibility("initial");
  }

  function updateVisibility(state: "initial" | "no-results" | "results") {
    if (initialState && noResultsState) {
      initialState.style.display = "none";
      noResultsState.style.display = "none";

      if (state === "initial") {
        initialState.style.display = "flex";
      } else if (state === "no-results") {
        noResultsState.style.display = "flex";
      }
    }
  }

  document.forms[0].addEventListener("submit", (event) => {
    event.preventDefault();
  });

  searchBar.addEventListener("input", (event) => {
    if (event.target instanceof HTMLInputElement) {
      const value = event.target.value.trim();
      if (value === "") {
        renderInitialSearchResult();
      } else {
        renderSearchResult(fuse.search(value));
      }
    }
  });

  clearButton.addEventListener("click", () => {
    searchBar.value = "";
    searchBar.focus();
    renderInitialSearchResult();
  });

  emptyStateTip.addEventListener("click", (e) => {
    if (
      e.target instanceof HTMLSpanElement &&
      e.target.className.includes("suggestion")
    ) {
      const term = e.target.textContent as string;
      searchBar.value = term;
      searchBar.focus();

      const results = fuse.search(term);
      renderSearchResult(results);
    }
  });

  renderInitialSearchResult();
</script>

<style is:global>
  * {
    box-sizing: border-box;
    font-family: system-ui, Ubuntu, Cantarell, sans-serif;
    color: var(--text-color);
  }

  :root {
    --bg-color: oklch(0.21 0.034 264.665);
    --container-bg-color: oklch(0.17 0.03 270);
    --text-color: oklch(0.95 0.01 258.338);
    --muted-text-color: oklch(0.8 0.01 258.338);
    --search-bg-color: oklch(0.25 0.03 264.364 / 0.7);
    --search-border-color: oklch(0.4 0.05 264.364);
    --search-focus-border-color: oklch(0.6 0.1 264.364);
    --card-bg-color: oklch(0.27 0.03 264.364 / 0.7);
    --card-hover-bg-color: oklch(0.3 0.04 264.364);
    --card-active-bg-color: oklch(0.32 0.05 264.364);
    --card-focus-outline-color: oklch(0.6 0.1 264.364);
    --card-border-color: oklch(0.3 0.04 264.364);
    --title-color: oklch(0.95 0.01 258.338);
    --link-color: oklch(0.7 0.15 250);
    --link-hover-color: oklch(0.8 0.15 250);
    --icon-color: oklch(0.7 0.15 250);
    --highlight-color: oklch(0.7 0.15 250 / 0.2);
  }

  @media (prefers-color-scheme: light) {
    :root {
      --bg-color: oklch(0.95 0.015 264.665);
      --container-bg-color: oklch(0.98 0.01 270);
      --text-color: oklch(0.2 0.02 258.338);
      --muted-text-color: oklch(0.4 0.02 258.338);
      --search-bg-color: oklch(0.97 0.01 264.364);
      --search-border-color: oklch(0.7 0.03 264.364);
      --search-focus-border-color: oklch(0.5 0.15 264.364);
      --card-bg-color: oklch(0.97 0.01 264.364);
      --card-hover-bg-color: oklch(0.95 0.02 264.364);
      --card-active-bg-color: oklch(0.93 0.03 264.364);
      --card-focus-outline-color: oklch(0.5 0.15 264.364);
      --card-border-color: oklch(0.8 0.02 264.364);
      --title-color: oklch(0.2 0.02 258.338);
      --link-color: oklch(0.5 0.2 250);
      --link-hover-color: oklch(0.4 0.2 250);
      --icon-color: oklch(0.5 0.2 250);
    }
  }

  html,
  body {
    background-color: var(--bg-color);
    scrollbar-gutter: stable both-edges;
  }

  .container {
    max-width: 50rem;
    margin: 1rem auto;
    padding: 2rem calc(8px + 1.5625vw);;
    background-color: var(--container-bg-color);
    border-radius: 1rem;
  }

  header {
    text-align: center;
    margin-bottom: 2.5rem;
  }

  h1 {
    font-size: 2.5rem;
    margin: 0 0 0.5rem;
    background: linear-gradient(
      135deg,
      oklch(0.7 0.2 250),
      oklch(0.7 0.15 280)
    );
    background-clip: text;
    color: transparent;
    font-weight: 800;
  }

  .subtitle {
    font-size: 1.1rem;
    color: var(--muted-text-color);
    margin: 0;
  }

  .search-container {
    padding: calc(8px + 1.5625vw);
  }

  form {
    position: relative;
    margin-bottom: 0.5rem;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--muted-text-color);
  }

  .search-input {
    width: 100%;
    padding: 1rem 3rem;
    font-size: 1.1rem;
    border: 2px solid var(--search-border-color);
    border-radius: 8px;
    background-color: var(--search-bg-color);
    color: var(--text-color);
    transition: all 0.2s ease;

    &:focus {
      outline: none;
      border-color: var(--search-focus-border-color);
    }

    &::placeholder {
      color: var(--muted-text-color);
      opacity: 0.7;
    }
  }

  .clear-button {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;

    &:hover {
      background-color: var(--card-hover-bg-color);
    }

    svg {
      width: 1.25rem;
      height: 1.25rem;
      color: var(--muted-text-color);
    }
  }

  .results-count {
    display: flex;
    justify-content: space-between;
    margin-block: 0 1rem;
    font-size: 0.9rem;
    color: var(--muted-text-color);
    min-height: 1.5rem;
  }

  .results {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .link-card {
    background-color: var(--card-bg-color);
    border: 1px solid var(--card-border-color);
    border-radius: 1rem;
    padding: 1.25rem;
    transition: all 0.2s ease;
    cursor: pointer;

    &:active {
      background-color: var(--card-active-bg-color);
      transform: translateY(0);
    }
    &:focus {
      outline: 2px solid var(--card-focus-outline-color);
      outline-offset: 2;
    }
  }

  .link-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 0.75rem 0;
    color: var(--title-color);
  }

  .link-url {
    display: flex;
    align-items: center;
    font-size: 0.9rem;
    color: var(--link-color);
    text-decoration: none;
    word-break: break-all;
    margin: 0;
    gap: 0.5rem;

    &:hover {
      color: var(--link-hover-color);
      text-decoration: underline;
    }
  }

  .link-url .external-link-icon {
    width: 0.9rem;
    height: 0.9rem;
    flex-shrink: 0;
    color: var(--icon-color);
  }

  .results-state {
    text-align: center;
    color: var(--muted-text-color);

  }

  .empty-state-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    border-radius: 1rem;
    background-color: var(--card-bg-color);
    border: 1px solid var(--card-border-color);
    height: 20rem;
  }

  .empty-state-icon {
    width: 3.5rem;
    height: 3.5rem;
    margin-bottom: 1.25rem;
    color: var(--icon-color);
  }

  .empty-state-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--title-color);
  }

  .empty-state-message {
    font-size: 1.1rem;
    color: var(--muted-text-color);
    max-width: 90%;
  }

  .suggestion {
    color: var(--link-color);
    cursor: pointer;
    padding: 0.2rem 0.5rem;
    background-color: var(--highlight-color);
    border-radius: 4px;
    transition: all 0.2s;
    display: inline-block;
    margin: 0 0.25rem;
  }

  .suggestion:hover {
    color: var(--link-hover-color);
    background-color: var(--highlight-color);
  }

  .highlight {
    background-color: var(--highlight-color);
  }

  @media (max-width: 600px) {

    h1 {
      font-size: 2rem;
    }

    .search-input {
      font-size: 1rem;
    }

    .empty-state-title {
      font-size: 1.2rem;
    }

    .link-title {
      font-size: 1.1rem;
    }
  }
</style>
